#!/usr/bin/env bash

build_legate_conda_package() {
    set -xeuo pipefail;

    local python_version="${PYTHON_VERSION:-}";

    if [ -z "${python_version}" ]; then
        python_version="$(python3 --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f3 --complement)";
    fi

    # Patch post.py
    if [[ "$(uname)" == "Darwin" ]]; then
      patch "/usr/local/Caskroom/mambaforge/base/envs/legate/lib/python${python_version}/site-packages/conda_build/post.py" < "$REPO_DIR/continuous_integration/post_py.patch"
    fi

    local conda_build_args=();
    conda_build_args+=(--override-channels);
    conda_build_args+=(-c conda-forge);
    conda_build_args+=(-c nvidia/label/cuda-${CUDA_VERSION});
    conda_build_args+=(--croot /tmp/conda-croot/legate_core);
    conda_build_args+=(--numpy 1.22);
    conda_build_args+=(--python ${python_version});
    conda_build_args+=(--no-test);
    conda_build_args+=(--no-verify);
    conda_build_args+=(--no-build-id);
    conda_build_args+=("--build-id-pat=''");
    conda_build_args+=(--no-include-recipe);
    conda_build_args+=(--no-anaconda-upload);
    conda_build_args+=(--output-folder /tmp/conda-build/legate_core);

    GPU_ENABLED=true
    [ "${USE_CUDA:-}" = "OFF" ] && GPU_ENABLED=false

    UCX_CONFIGURED=true
    [ "${UCX_ENABLED:-}" = "OFF" ] && UCX_CONFIGURED=false

    NIGHTLY_RELEASE_ENABLED=false
    [ "${NIGHTLY_RELEASE_BUILD:-}" = "ON" ] && NIGHTLY_RELEASE_ENABLED=true

    conda_build_args+=(--variants "{gpu_enabled:${GPU_ENABLED},python:${python_version},ucx_configured:${UCX_CONFIGURED}}");
    
    rm -rf /tmp/conda-croot/legate_core;
    mkdir -p /tmp/conda-croot/legate_core;
    rm -rf /tmp/conda-build/legate_core;
    mkdir -p /tmp/conda-build/legate_core;

    # Synthesize new legate_core conda-build build.sh script

    cat <<EOF > $REPO_DIR/conda/conda-build/conda_build_config.yaml
numpy:
  - 1.22
python:
  - "${python_version}"
numpy_version:
  - ">=1.22"
use_local_path:
  - "true"
gpu_enabled:
  - "${GPU_ENABLED}"
debug_build:
  - "false"
cmake_version:
  - ">=3.20.1,!=3.23.0"
package_version:
  - "$(git -C $REPO_DIR describe --abbrev=0 --tags | $SED 's/[a-zA-Z]//g' | cut -d '.' -f -2).00"
ucx_configured:
  - "${UCX_CONFIGURED}"
enable_nightly_package:
  - "${NIGHTLY_RELEASE_ENABLED}"
EOF
if [ "$UCX_ENABLED" = "ON" ]; then
    cat <<EOF >> $REPO_DIR/conda/conda-build/conda_build_config.yaml
ucx:
  - ">=1.14"
EOF
fi
    cat <<EOF > $REPO_DIR/conda/conda-build/build.sh
echo "---------------------build.sh-------------------------"
set -x

# Install legate_core C++ libs
tar -C "\$PREFIX" --exclude="*.a" --strip-components=1 -xf /tmp/out/legate_core-*-$(uname).tar.gz;
$SED -E -i "s@$CONDA_PREFIX@\$PREFIX@g" "\$PREFIX/share/Legion/cmake/LegionConfigCommon.cmake";
$SED -E -i "s@$REPO_DIR/build/_CPack_Packages/$(uname)/TGZ/legate_core-(.*)-$(uname)@\$PREFIX@g" "\$SP_DIR/legion_canonical_cffi.py";

# Install legate_core Python wheel
pip install --no-deps --root / --prefix "\$PREFIX" /tmp/out/legate_core-*.whl;

# Legion leaves .egg-info files, which confuses conda trying to pick up the information
# Remove them so legate-core is the only egg-info file added.
rm -rf "\$SP_DIR"/legion*egg-info;
EOF

    git -C $REPO_DIR add .;
    git -C $REPO_DIR commit --allow-empty --allow-empty-message -n -m "";

    # Build legate_core conda package
    conda mambabuild ${conda_build_args[@]} $REPO_DIR/conda/conda-build;

    git -C $REPO_DIR reset --hard HEAD~1;

    cp /tmp/conda-build/legate_core/${CONDA_PLATFORM}/legate-*.tar.bz2 /tmp/out/;
}

(build_legate_conda_package "$@");
