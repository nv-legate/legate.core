#!/usr/bin/env bash

set_repo_dir() {
    set -xeuo pipefail

    # Resolve the directory of the script
    SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

    # Navigate to the parent of the parent of SCRIPT_DIR, then get the full path
    REPO_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"

    export REPO_DIR

    export PATH="${PATH}:${REPO_DIR}/continuous_integration/scripts"
    export ARTIFACTS_DIR="${REPO_DIR}/.artifacts"
}

build_legate_ci() {
    build-legate-cpp;
    build-legate-wheel;
    build-legate-conda;
}

build_legate_release() {
    mkdir -p /tmp/env_yaml /tmp/conda-build

    conda mambabuild --output-folder /tmp/conda-build -c nvidia/label/cuda-${CUDA_VERSION} -c conda-forge --no-include-recipe conda/conda-build
}

build_legate_nightly_release() {
  set -xeuo pipefail;
  local python_version="${PYTHON_VERSION:-}";
  if [ -z "${python_version}" ]; then
      python_version="$(python3 --version 2>&1 | cut -d' ' -f2 | cut -d'.' -f3 --complement)";
  fi
  local conda_build_args=();
  conda_build_args+=(--override-channels);
  conda_build_args+=(-c conda-forge);
  conda_build_args+=(-c nvidia);
  conda_build_args+=(--numpy 1.22);
  conda_build_args+=(--python ${python_version});
  conda_build_args+=(--no-test);
  conda_build_args+=(--no-verify);
  conda_build_args+=(--no-build-id);
  conda_build_args+=("--build-id-pat=''");
  conda_build_args+=(--no-include-recipe);
  conda_build_args+=(--no-anaconda-upload);
  conda_build_args+=(--output-folder /tmp/conda-build);

    mkdir -p /tmp/env_yaml /tmp/conda-build
    cat <<EOF > $REPO_DIR/conda/conda-build/conda_build_config.yaml
enable_nightly_package:
  - "true"
debug_build:
  - "false"
gpu_enabled:
  - "true"
ucx_configured:
  - "true"
python:
  - 3.11
ucx:
  - ">=1.14"
numpy_version:
  - ">=1.22"
cmake_version:
  - ">=3.20.1,!=3.23.0"
EOF
    conda mambabuild --output-folder /tmp/conda-build -c nvidia/label/cuda-${CUDA_VERSION} -c conda-forge --no-test --no-verify --no-build-id --no-include-recipe conda/conda-build
    ls -laRt /tmp/conda-build
    #conda mambabuild ${conda_build_args[@]} conda/conda-build;
}

copy_release_artifacts() {
    echo Copying release artifacts
    cp /tmp/conda-build/linux-64/legate-core-*.tar.bz2 "$ARTIFACTS_DIR"
}

copy_ci_artifacts() {
    echo Copying CI artifacts

    cp -r /tmp/out          "$ARTIFACTS_DIR"
    cp -r /tmp/conda-build  "$ARTIFACTS_DIR"
}

copy_docs_artifacts() {
    echo Copying artifacts
    cp -r $REPO_DIR/docs/legate/core/build/html/* "$ARTIFACTS_DIR/."
}

build_docs() {
    set -x;
    cd $REPO_DIR;

    echo "Build doxygen documentation through install.py"
    conda run -n legate /bin/bash -c "./install.py --docs"

    echo "Build documentation using Makefile"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make html"

    echo "Run link checker"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make linkcheck"
}

build_legate() {
    set -x;

    set_repo_dir;
    . conda-utils;
    . setup-utils;

    export BUILD_TYPE=$1

    set -xeuo pipefail;
    setup_build_env;
    init_sccache;
    cd $REPO_DIR;

    make-conda-env "$BUILD_TYPE";

    set -xeo pipefail;
    activate_conda_env;
    conda_info;

    case "$BUILD_TYPE" in
        ci) build_legate_ci && copy_ci_artifacts;;
        release) build_legate_release && copy_release_artifacts;;
        docs) build_docs && copy_docs_artifacts;;
        *) return 1;;
    esac
}

(build_legate "$@");