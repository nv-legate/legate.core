{% set name = "legate-core" %}
{% if gpu_enabled == "true" %}
  {% set gpu_enabled_bool = true %}
{% elif gpu_enabled == "false" %}
  {% set gpu_enabled_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set gpu_enabled_bool = false %}
{% endif %}
{% if debug_build == "true" %}
  {% set debug_build_bool = true %}
{% elif debug_build == "false" %}
  {% set debug_build_bool = false %}
{% else %}
  {# We need to have a default value for the initial pass over the recipe #}
  {% set debug_build_bool = false %}
{% endif %}
{% set default_env_var = '' %}
{% if build_number is defined %}
    {# do nothing if defined #}
{% else %}
    {% set build_number = environ.get('GIT_DESCRIBE_NUMBER', '0') %}
{% endif %}
{% if package_version is defined %}
    {% set version = package_version %}
## The tag must be in one of the two formats (where N is a digit):
## vNN.NN.NN
## vNN.NN.NN.dev
{% elif 'dev' in environ.get('GIT_DESCRIBE_TAG', default_env_var) %}
    {% set version = (environ.get('GIT_DESCRIBE_TAG') ~ environ.get('GIT_DESCRIBE_NUMBER', default_env_var)).lstrip('v') %}
{% else %}
    {% set version = environ.get('GIT_DESCRIBE_TAG', default_env_var).lstrip('v') %}
{% endif %}
{% set cuda_version='.'.join(environ.get('CUDA', '12.0').split('.')[:2]) %}
{% set cuda_major=cuda_version.split('.')[0]|int %}
{% set py_version=environ.get('CONDA_PY', 36) %}

{% if use_local_path is not defined %}
{% set git_describe_hash='_' + environ.get('GIT_DESCRIBE_HASH', '0')%}
{% else %}
{% set git_describe_hash=''%}
{% endif %}

{% if not gpu_enabled_bool %}
{% set cpu_tag='_cpu' %}
{% else %}
{% set cpu_tag='' %}
{% endif %}

{% if debug_build_bool %}
{% set debug_tag='_debug' %}
{% else %}
{% set debug_tag='' %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
{% if package_tar is defined %}
  url: {{ package_tar }}
{% elif use_local_path is defined %}
  path: ../../
{% else %}
  git_url: ../../
{% endif %}

build:
  skip: true # [not linux]
  number: {{ build_number }}
  missing_dso_whitelist:
    -  '*libcuda.so*'

  string: "cuda{{ cuda_major }}_py{{ py_version }}{{ git_describe_hash }}_{{ PKG_BUILDNUM }}{{ cpu_tag }}{{ debug_tag }}"

  script_env:
    - SCCACHE_BUCKET
    - SCCACHE_REGION
    - SCCACHE_IDLE_TIMEOUT
    - SCCACHE_S3_KEY_PREFIX
    - SCCACHE_S3_KEY_PREFIX
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - CMAKE_C_COMPILER_LAUNCHER
    - CMAKE_CXX_COMPILER_LAUNCHER
    - CMAKE_CUDA_COMPILER_LAUNCHER
{% if not gpu_enabled_bool %}
    - CPU_ONLY=1
    - USE_CUDA=OFF
  track_features:
    - cpu_only
{% else %}
    - USE_CUDA=ON
{% endif %}
{% if debug_build_bool %}
    - DEBUG_BUILD=1
{% endif %}
  run_exports:
{% if not gpu_enabled_bool %}
    - {{ pin_subpackage(name, min_pin="x.x.x", max_pin="x.x.x") }} =*_cpu
{% else %}
    - {{ pin_subpackage(name, min_pin="x.x.x", max_pin="x.x.x") }}
{% endif %}
{% if gpu_enabled_bool %}
# prevent nccl from pulling in cudatoolkit
  ignore_run_exports:
    - cudatoolkit
  ignore_run_exports_from:
    - cuda-nvcc
{% endif %}

requirements:
  # Compilers and build system
  build:
    - make
    - rust
    - ninja
    - cmake {{ cmake_version }}
    - {{ compiler('c') }} =11.2
    - {{ compiler('cxx') }} =11.2

  # Libraries and header files (C/C++).
  host:
    - zlib
    - python
    - cython
    - llvm-openmp
    - scikit-build
    - elfutils # [linux]
    - libdwarf # [linux]
{% if gpu_enabled_bool %}
    - nccl
    - cuda-nvcc ={{ cuda_version }}
    - cuda-nvtx ={{ cuda_version }}
    - cuda-cccl ={{ cuda_version }}
    - cuda-cudart ={{ cuda_version }}
    - cuda-cudart-static ={{ cuda_version }}
    - cuda-nvml-dev ={{ cuda_version }}
    - cuda-driver-dev ={{ cuda_version }}
    - cuda-cudart-dev ={{ cuda_version }}
    - libcublas-dev
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
{% endif %}

  # Runtime python dependencies
  run:
    - cffi
    - llvm-openmp
    - numpy {{ numpy_version }}
    - typing_extensions
    - elfutils # [linux]
    - libdwarf # [linux]
{% if gpu_enabled_bool %}
    - cuda-cudart  >={{ cuda_version }},<{{ cuda_major+1 }}
    - cuda-version >={{ cuda_version }},<{{ cuda_major+1 }}
    - nccl
{% endif %}

  run_constrained:
    - __glibc >=2.17  # [linux]
    - python != 3.9.7
{% if gpu_enabled_bool %}
    - __cuda >={{ cuda_version }}
{% endif %}

test:
  imports:
    - legate

about:
  home: https://github.com/nv-legate/legate.core
  license: Apache-2.0
  license_file: LICENSE
  summary: 'Scalable Computational Code'
  description: |
    The Legate project endeavors to democratize computing by
    making it possible for all programmers to leverage the power
    of large clusters of CPUs and GPUs by running the same code
    that runs on a desktop or a laptop at scale.
  doc_url: https://github.com/nv-legate/legate.core
  dev_url: https://github.com/nv-legate/legate.core

extra:
  recipe-maintainers:
    - m3vaz
